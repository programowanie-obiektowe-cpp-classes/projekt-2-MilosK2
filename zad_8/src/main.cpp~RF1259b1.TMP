#include "PrintHello.hpp"
#include <vector>
#include<string>
#include<iostream>
#include <fstream>

class Step
{public:
    std::string type      = "";
    bool        visited   = 0;

    int                value   = 0;
    std::vector< int > parent;

};

int first(std::vector< Step >& steps)
{
    int  accumulator = 0;
    bool done        = 0;
    int  position    = 0;
    int  size        = steps.size();

    while (!done)
    {

        steps.at(position).visited = true;

        if (steps.at(position).type == "acc")
        {
            accumulator += steps.at(position).value;
            position += 1;
        }
        else if (steps.at(position).type == "jmp")
            position += steps.at(position).value;
        else if (steps.at(position).type == "nop")
            position += 1;
        else
            std::cout << "Type reading error\n";

        if (steps.at(position).visited == true)
            done = true;
    }
    return accumulator;
}

int second(std::vector< Step >& steps)
{
    int  accumulator = 0;
    bool done        = 0;
    int  position    = 0;
    int  size        = steps.size();

    while (!done)
    {
        steps.at(position).visited = true;

        if (steps.at(position).type == "acc")
        {
            accumulator += steps.at(position).value;
            position += 1;
        }
        else if (steps.at(position).type == "jmp")
            position += steps.at(position).value;
        else if (steps.at(position).type == "nop")
            position += 1;
        else
            std::cout << "Type reading error\n";

        if (steps.at(position).visited == true or position>steps.size())
            done = true;
    }
    return accumulator;
}

int main()
{
    std::vector<Step> steps;
    std::ifstream     data("C:/Users/Lenovo/Desktop/Studia/Cpp/projekt-2-MilosK2/zad_8/aoc8.txt");
    std::string       buff;

    while (std::getline(data, buff))
    {
        Step step;
        step.type = buff.substr(0, 3);

        step.value = std::stoi(buff.substr(4, buff.size()));

        steps.push_back(std::move(step));
    }

    for (auto it = steps.begin();it!=steps.end()-1; it++)
    {

        int index = std::distance(steps.begin(), it);

        if (it->type == "acc" or it->type == "nop")
            steps.at(index + 1).parent.push_back(index);
        else
            steps.at(index + it->value).parent.push_back(index);
    }

    std::cout << first(steps) << std::endl;

    bool done = false;
    int  position;
    position = steps.back().parent.at(0); // id¹c w ty³ poprawnym rozwi¹zaniem nie mo¿e byæ wiêcej rodziców
    while (steps.at(position).parent.size()!=0)
    {
        position = steps.at(position).parent.at(0);
    }


    int count = 0;
    for (auto it = steps.begin(); it != steps.end() - 1; it++)
    {
        int index = std::distance(steps.begin(), it);

        if (it->type == "jmp" and index + 1 == position)
        {
            count++;
            it->type = "nop";
        }
        else if (it->type == "nop" and index + it->value == position)
        {
            count++;
            it->type = "jmp";
        }
    }



     
    std::cout << count;

}
